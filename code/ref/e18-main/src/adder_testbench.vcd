$date
	Fri Apr 12 20:28:15 2024
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module adder_testbench $end
$var wire 1 ! spike $end
$var wire 32 " final_potential [31:0] $end
$var reg 1 # CLK $end
$var reg 4 $ CLK_count [3:0] $end
$var reg 1 % clear $end
$var reg 32 & decayed_potential [31:0] $end
$var reg 32 ' input_weight [31:0] $end
$var reg 32 ( v_threshold [31:0] $end
$scope module potential_adder_1 $end
$var wire 1 ) Exception $end
$var wire 1 % clear $end
$var wire 32 * decayed_potential [31:0] $end
$var wire 32 + input_weight [31:0] $end
$var wire 32 , v_threshold [31:0] $end
$var wire 32 - reset_value [31:0] $end
$var wire 1 . greater $end
$var wire 32 / add_value [31:0] $end
$var reg 32 0 added_potential [31:0] $end
$var reg 32 1 final_potential [31:0] $end
$var reg 1 ! spike $end
$scope module Addition_Subtraction_1 $end
$var wire 1 2 AddBar_Sub $end
$var wire 1 ) Exception $end
$var wire 32 3 a_operand [31:0] $end
$var wire 32 4 b_operand [31:0] $end
$var wire 1 5 operation_sub_addBar $end
$var wire 1 6 output_sign $end
$var wire 25 7 subtraction_diff [24:0] $end
$var wire 31 8 sub_diff [30:0] $end
$var wire 24 9 significand_sub_complement [23:0] $end
$var wire 25 : significand_sub [24:0] $end
$var wire 24 ; significand_b_add_sub [23:0] $end
$var wire 24 < significand_b [23:0] $end
$var wire 25 = significand_add [24:0] $end
$var wire 24 > significand_a [23:0] $end
$var wire 32 ? result [31:0] $end
$var wire 1 @ perform $end
$var wire 32 A operand_b [31:0] $end
$var wire 32 B operand_a [31:0] $end
$var wire 8 C exponent_sub [7:0] $end
$var wire 8 D exponent_diff [7:0] $end
$var wire 8 E exponent_b_add_sub [7:0] $end
$var wire 31 F add_sum [30:0] $end
$var wire 1 G Comp_enable $end
$scope module pe $end
$var wire 8 H Exponent_a [7:0] $end
$var wire 25 I significand [24:0] $end
$var wire 8 J Exponent_sub [7:0] $end
$var reg 25 K Significand [24:0] $end
$var reg 5 L shift [4:0] $end
$upscope $end
$upscope $end
$scope module Addition_Subtraction_2 $end
$var wire 1 M AddBar_Sub $end
$var wire 1 ) Exception $end
$var wire 32 N a_operand [31:0] $end
$var wire 32 O b_operand [31:0] $end
$var wire 1 P operation_sub_addBar $end
$var wire 1 Q output_sign $end
$var wire 25 R subtraction_diff [24:0] $end
$var wire 31 S sub_diff [30:0] $end
$var wire 24 T significand_sub_complement [23:0] $end
$var wire 25 U significand_sub [24:0] $end
$var wire 24 V significand_b_add_sub [23:0] $end
$var wire 24 W significand_b [23:0] $end
$var wire 25 X significand_add [24:0] $end
$var wire 24 Y significand_a [23:0] $end
$var wire 32 Z result [31:0] $end
$var wire 1 [ perform $end
$var wire 32 \ operand_b [31:0] $end
$var wire 32 ] operand_a [31:0] $end
$var wire 8 ^ exponent_sub [7:0] $end
$var wire 8 _ exponent_diff [7:0] $end
$var wire 8 ` exponent_b_add_sub [7:0] $end
$var wire 31 a add_sum [30:0] $end
$var wire 1 b Comp_enable $end
$scope module pe $end
$var wire 8 c Exponent_a [7:0] $end
$var wire 25 d significand [24:0] $end
$var wire 8 e Exponent_sub [7:0] $end
$var reg 25 f Significand [24:0] $end
$var reg 5 g shift [4:0] $end
$upscope $end
$upscope $end
$scope module comparator_2 $end
$var wire 32 h a_operand [31:0] $end
$var wire 32 i b_operand [31:0] $end
$var wire 32 j result [31:0] $end
$var wire 1 k Exception $end
$var reg 1 . greater $end
$var reg 1 l sign $end
$scope module Addition_Subtraction_1 $end
$var wire 1 m AddBar_Sub $end
$var wire 1 k Exception $end
$var wire 32 n a_operand [31:0] $end
$var wire 32 o b_operand [31:0] $end
$var wire 1 p operation_sub_addBar $end
$var wire 1 q output_sign $end
$var wire 25 r subtraction_diff [24:0] $end
$var wire 31 s sub_diff [30:0] $end
$var wire 24 t significand_sub_complement [23:0] $end
$var wire 25 u significand_sub [24:0] $end
$var wire 24 v significand_b_add_sub [23:0] $end
$var wire 24 w significand_b [23:0] $end
$var wire 25 x significand_add [24:0] $end
$var wire 24 y significand_a [23:0] $end
$var wire 32 z result [31:0] $end
$var wire 1 { perform $end
$var wire 32 | operand_b [31:0] $end
$var wire 32 } operand_a [31:0] $end
$var wire 8 ~ exponent_sub [7:0] $end
$var wire 8 !" exponent_diff [7:0] $end
$var wire 8 "" exponent_b_add_sub [7:0] $end
$var wire 31 #" add_sum [30:0] $end
$var wire 1 $" Comp_enable $end
$scope module pe $end
$var wire 8 %" Exponent_a [7:0] $end
$var wire 25 &" significand [24:0] $end
$var wire 8 '" Exponent_sub [7:0] $end
$var reg 25 (" Significand [24:0] $end
$var reg 5 )" shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100 )"
b110000000000000000000000 ("
b1111111 '"
b1000011000000000000000000 &"
b10000011 %"
1$"
b1000001100000000000000000000000 #"
b10000011 ""
b1 !"
b1111111 ~
b1000001100010000000000000000000 }
b1000001011110000000000000000000 |
1{
b10111111110000000000000000000000 z
b100010000000000000000000 y
b0 x
b111110000000000000000000 w
b11111000000000000000000 v
b1000011000000000000000000 u
b100001000000000000000000 t
b111111110000000000000000000000 s
b110000000000000000000000 r
1q
0p
b1000001100010000000000000000000 o
b1000001011110000000000000000000 n
1m
1l
0k
b10111111110000000000000000000000 j
b1000001100010000000000000000000 i
b1000001011110000000000000000000 h
b0 g
b1011000000000000000000000 f
b10000010 e
b101000000000000000000000 d
b10000010 c
0b
b1000001011110000000000000000000 a
b10000010 `
b1 _
b10000010 ^
b1000001001000000000000000000000 ]
b1000000101100000000000000000000 \
1[
b1000001011110000000000000000000 Z
b101000000000000000000000 Y
b111110000000000000000000 X
b101100000000000000000000 W
b10110000000000000000000 V
b101000000000000000000000 U
b0 T
b1000001011000000000000000000000 S
b1011000000000000000000000 R
0Q
1P
b1000000101100000000000000000000 O
b1000001001000000000000000000000 N
0M
b100 L
b110000000000000000000000 K
b1111111 J
b1000011000000000000000000 I
b10000011 H
1G
b1000001100000000000000000000000 F
b10000011 E
b1 D
b1111111 C
b1000001100010000000000000000000 B
b1000001011110000000000000000000 A
1@
b10111111110000000000000000000000 ?
b100010000000000000000000 >
b0 =
b111110000000000000000000 <
b11111000000000000000000 ;
b1000011000000000000000000 :
b100001000000000000000000 9
b111111110000000000000000000000 8
b110000000000000000000000 7
16
05
b1000001100010000000000000000000 4
b1000001011110000000000000000000 3
12
bx 1
b1000001011110000000000000000000 0
b1000001011110000000000000000000 /
0.
b10111111110000000000000000000000 -
b1000001100010000000000000000000 ,
b1000001001000000000000000000000 +
b1000000101100000000000000000000 *
0)
b1000001100010000000000000000000 (
b1000001001000000000000000000000 '
b1000000101100000000000000000000 &
0%
b0 $
0#
bx "
0!
$end
#40
b1 $
1#
#80
0#
#120
b10 $
1#
#160
0#
#200
b11 $
1#
#240
0#
#280
b1000001011110000000000000000000 "
b1000001011110000000000000000000 1
1%
b0 $
1#
#320
0#
#360
0%
b1 $
1#
#400
0#
#440
b10 $
1#
#480
0#
#520
b11 $
1#
#560
0#
#600
1%
b0 $
1#
#640
0#
#680
0%
b1 $
1#
#720
0#
#760
b10 $
1#
#800
0#
#840
b11 $
1#
#880
0#
#920
1%
b0 $
1#
#960
0#
#1000
0%
b1 $
1#
